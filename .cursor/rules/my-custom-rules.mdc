---
description: 
globs: 
alwaysApply: true
---
Sure! Below are the best practices for each major library/framework based on your requirements. Please adapt the globs according to your specific project needs.

---

name: react-best-practices.mdc  
description: Best practices for React applications  
globs: **/*.{ts,tsx,js,jsx}  
---  

- Use functional components and hooks for state management.
- Keep components small and focused on a single responsibility.
- Use PropTypes or TypeScript for type checking.
- Implement error boundaries for better error handling.
- Optimize performance with React.memo and useCallback.

---

name: nextjs-best-practices.mdc  
description: Best practices for Next.js applications and routing  
globs: **/*.{ts,tsx}  
---  

- Use the App Router for better performance.
- Implement proper error boundaries.
- Use proper data fetching patterns with suspense.
- Optimize images with the Next.js Image component.
- Leverage static site generation (SSG) and server-side rendering (SSR) appropriately.

---

name: typescript-best-practices.mdc  
description: TypeScript coding standards and type safety guidelines  
globs: **/*.{ts,tsx}  
---  

- Use strict null checks.
- Prefer interface over type for object shapes.
- Use type guards and assertions for better type safety.
- Implement proper type inference to reduce redundancy.
- Keep types and interfaces organized in separate files.

---

name: tailwindcss-best-practices.mdc  
description: Best practices for using Tailwind CSS  
globs: **/*.{ts,tsx,css}  
---  

- Use utility-first classes for styling instead of custom CSS.
- Leverage responsive design features with Tailwind's responsive utilities.
- Use Tailwind's JIT mode for faster builds and on-demand class generation.
- Organize Tailwind classes logically for better readability.
- Avoid using arbitrary values; prefer Tailwind's predefined spacing and sizing.

---

name: shadcn-best-practices.mdc  
description: Guidelines for using Shadcn UI components  
globs: **/*.{ts,tsx}  
---  

- Follow Shadcn's component structure and naming conventions.
- Ensure components are reusable and composable.
- Implement 